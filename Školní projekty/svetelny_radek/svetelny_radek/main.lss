
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  0000077a  0000080e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001a8  008001a8  000008b6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000139  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000541  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000216  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ed  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c8  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000166  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  68:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  6c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  70:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  7c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  80:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  84:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  88:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

0000008c <__c.1776>:
  8c:	45 46 47 65 66 67 00                                EFGefg.

00000093 <__c.1770>:
  93:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
  a3:	00                                                  .

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d0 e1       	ldi	r29, 0x10	; 16
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f7 e0       	ldi	r31, 0x07	; 7
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 3a       	cpi	r26, 0xA8	; 168
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a8 ea       	ldi	r26, 0xA8	; 168
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	ac 3a       	cpi	r26, 0xAC	; 172
  d6:	b1 07       	cpc	r27, r17
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  de:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <setup>:
int cisloRegistr4 = 0;
int cisloRegistr5 = 4;
int cisloRegistr6 = 0;

void setup(void){ //Prvotní pøipravení portù
	DDRB = 0xFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF; //Data - AKTIVNÍ V 0
  ea:	88 bb       	out	0x18, r24	; 24
	DDRD = 0xFF;
  ec:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00; //Registry - AKTIVNÍ V 1
  ee:	12 ba       	out	0x12, r1	; 18
  f0:	84 ef       	ldi	r24, 0xF4	; 244
  f2:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f4:	20 e7       	ldi	r18, 0x70	; 112
  f6:	31 e0       	ldi	r19, 0x01	; 1
  f8:	f9 01       	movw	r30, r18
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <setup+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <setup+0x12>
	_delay_ms(50);
}
 102:	08 95       	ret

00000104 <pocitaniCasu>:
	//_delay_us(1);
	//Vyèištìní dat
}

void pocitaniCasu(void){ //Spravuje "tikání" èasu
	if(cisloRegistr6 != 9){ //Kontrola sekund druhé cifry
 104:	80 91 aa 01 	lds	r24, 0x01AA
 108:	90 91 ab 01 	lds	r25, 0x01AB
 10c:	89 30       	cpi	r24, 0x09	; 9
 10e:	91 05       	cpc	r25, r1
 110:	31 f0       	breq	.+12     	; 0x11e <pocitaniCasu+0x1a>
			cisloRegistr6++;
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 ab 01 	sts	0x01AB, r25
 118:	80 93 aa 01 	sts	0x01AA, r24
 11c:	0d c0       	rjmp	.+26     	; 0x138 <pocitaniCasu+0x34>
		}
		else{
			cisloRegistr5++; 
 11e:	80 91 a6 01 	lds	r24, 0x01A6
 122:	90 91 a7 01 	lds	r25, 0x01A7
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 a7 01 	sts	0x01A7, r25
 12c:	80 93 a6 01 	sts	0x01A6, r24
			cisloRegistr6 = 0;
 130:	10 92 ab 01 	sts	0x01AB, r1
 134:	10 92 aa 01 	sts	0x01AA, r1
		}
		if(cisloRegistr5 == 6){ //kontrola sekund první cifry
 138:	80 91 a6 01 	lds	r24, 0x01A6
 13c:	90 91 a7 01 	lds	r25, 0x01A7
 140:	06 97       	sbiw	r24, 0x06	; 6
 142:	89 f4       	brne	.+34     	; 0x166 <pocitaniCasu+0x62>
			cisloRegistr5 = 0;
 144:	10 92 a7 01 	sts	0x01A7, r1
 148:	10 92 a6 01 	sts	0x01A6, r1
			cisloRegistr6 = 0;
 14c:	10 92 ab 01 	sts	0x01AB, r1
 150:	10 92 aa 01 	sts	0x01AA, r1
			cisloRegistr4++;
 154:	80 91 a8 01 	lds	r24, 0x01A8
 158:	90 91 a9 01 	lds	r25, 0x01A9
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 a9 01 	sts	0x01A9, r25
 162:	80 93 a8 01 	sts	0x01A8, r24
		}
		if(cisloRegistr4 == 10){ //kontrola minut druhé cifry
 166:	80 91 a8 01 	lds	r24, 0x01A8
 16a:	90 91 a9 01 	lds	r25, 0x01A9
 16e:	0a 97       	sbiw	r24, 0x0a	; 10
 170:	69 f4       	brne	.+26     	; 0x18c <pocitaniCasu+0x88>
			cisloRegistr4=0;
 172:	10 92 a9 01 	sts	0x01A9, r1
 176:	10 92 a8 01 	sts	0x01A8, r1
			cisloRegistr3++;
 17a:	80 91 a4 01 	lds	r24, 0x01A4
 17e:	90 91 a5 01 	lds	r25, 0x01A5
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 a5 01 	sts	0x01A5, r25
 188:	80 93 a4 01 	sts	0x01A4, r24
		}
		if(cisloRegistr3 == 6){ //kontrola minut první cifry
 18c:	80 91 a4 01 	lds	r24, 0x01A4
 190:	90 91 a5 01 	lds	r25, 0x01A5
 194:	06 97       	sbiw	r24, 0x06	; 6
 196:	69 f4       	brne	.+26     	; 0x1b2 <pocitaniCasu+0xae>
			cisloRegistr3=0;
 198:	10 92 a5 01 	sts	0x01A5, r1
 19c:	10 92 a4 01 	sts	0x01A4, r1
			cisloRegistr2++;
 1a0:	80 91 a2 01 	lds	r24, 0x01A2
 1a4:	90 91 a3 01 	lds	r25, 0x01A3
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 a3 01 	sts	0x01A3, r25
 1ae:	80 93 a2 01 	sts	0x01A2, r24
		}
		if(cisloRegistr2 == 10){ //kontrola hodin druhé cifry
 1b2:	80 91 a2 01 	lds	r24, 0x01A2
 1b6:	90 91 a3 01 	lds	r25, 0x01A3
 1ba:	0a 97       	sbiw	r24, 0x0a	; 10
 1bc:	69 f4       	brne	.+26     	; 0x1d8 <pocitaniCasu+0xd4>
			cisloRegistr2 = 0;
 1be:	10 92 a3 01 	sts	0x01A3, r1
 1c2:	10 92 a2 01 	sts	0x01A2, r1
			cisloRegistr1++;
 1c6:	80 91 a0 01 	lds	r24, 0x01A0
 1ca:	90 91 a1 01 	lds	r25, 0x01A1
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 a1 01 	sts	0x01A1, r25
 1d4:	80 93 a0 01 	sts	0x01A0, r24
		}
		if((cisloRegistr1 == 2) && (cisloRegistr2 == 4)){ //kontrola hodin první cifry
 1d8:	80 91 a0 01 	lds	r24, 0x01A0
 1dc:	90 91 a1 01 	lds	r25, 0x01A1
 1e0:	02 97       	sbiw	r24, 0x02	; 2
 1e2:	71 f4       	brne	.+28     	; 0x200 <pocitaniCasu+0xfc>
 1e4:	80 91 a2 01 	lds	r24, 0x01A2
 1e8:	90 91 a3 01 	lds	r25, 0x01A3
 1ec:	04 97       	sbiw	r24, 0x04	; 4
 1ee:	41 f4       	brne	.+16     	; 0x200 <pocitaniCasu+0xfc>
			cisloRegistr1=0;
 1f0:	10 92 a1 01 	sts	0x01A1, r1
 1f4:	10 92 a0 01 	sts	0x01A0, r1
			cisloRegistr2=0;
 1f8:	10 92 a3 01 	sts	0x01A3, r1
 1fc:	10 92 a2 01 	sts	0x01A2, r1
 200:	08 95       	ret

00000202 <zapsaniDat>:
	DDRD = 0xFF;
	PORTD = 0x00; //Registry - AKTIVNÍ V 1
	_delay_ms(50);
}

void zapsaniDat(int cislo,int sloupec, int registr){ //Zapíše data na daný registr podle sloupce
 202:	1f 93       	push	r17
	PORTB = 0xFF; //Vyèištìní dat
 204:	1f ef       	ldi	r17, 0xFF	; 255
 206:	18 bb       	out	0x18, r17	; 24
	PORTD = 0x00;
 208:	12 ba       	out	0x12, r1	; 18
	PORTB = ~cisla[cislo][sloupec]; //Pøevrácení hodnot a pøíprava dat
 20a:	fc 01       	movw	r30, r24
 20c:	93 e0       	ldi	r25, 0x03	; 3
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	9a 95       	dec	r25
 214:	e1 f7       	brne	.-8      	; 0x20e <zapsaniDat+0xc>
 216:	e6 0f       	add	r30, r22
 218:	f7 1f       	adc	r31, r23
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e0 50       	subi	r30, 0x00	; 0
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	80 81       	ld	r24, Z
 224:	80 95       	com	r24
 226:	88 bb       	out	0x18, r24	; 24
	PORTD = setBit(0x00,registr); //Poslání dat na registr
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ba 01       	movw	r22, r20
 22e:	0e 94 ad 01 	call	0x35a	; 0x35a <setBit>
 232:	82 bb       	out	0x12, r24	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <zapsaniDat+0x34>
	_delay_us(0.1);
	PORTD = 0x00;
 23a:	12 ba       	out	0x12, r1	; 18
	PORTB = 0xFF; //Vyèištìní dat
 23c:	18 bb       	out	0x18, r17	; 24
}
 23e:	1f 91       	pop	r17
 240:	08 95       	ret

00000242 <vykresleniSloupce>:

void vykresleniSloupce(int sloupec){ //Vykreslí zadaný sloupec na všech registrech
 242:	ff 92       	push	r15
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	8c 01       	movw	r16, r24
	PORTB = 0xFF; //Vyèištìní dat
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	88 bb       	out	0x18, r24	; 24
	PORTD = setBit(0x00,7);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 ad 01 	call	0x35a	; 0x35a <setBit>
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	24 e0       	ldi	r18, 0x04	; 4
 25e:	f2 2e       	mov	r15, r18
 260:	8f 2d       	mov	r24, r15
 262:	8a 95       	dec	r24
 264:	f1 f7       	brne	.-4      	; 0x262 <vykresleniSloupce+0x20>
	_delay_us(1);
	sloupec = 7 - sloupec; //Obrácení sloupcù
	PORTB = clearBit(0xFF, sloupec); //Urèení jaký sloupec
 266:	67 e0       	ldi	r22, 0x07	; 7
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	60 1b       	sub	r22, r16
 26c:	71 0b       	sbc	r23, r17
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 b8 01 	call	0x370	; 0x370 <clearBit>
 276:	88 bb       	out	0x18, r24	; 24
	PORTD = setBit(0x00,7); //Vykreslení sloupcù
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	67 e0       	ldi	r22, 0x07	; 7
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	0e 94 ad 01 	call	0x35a	; 0x35a <setBit>
 284:	82 bb       	out	0x12, r24	; 18
 286:	fa 94       	dec	r15
 288:	f1 f7       	brne	.-4      	; 0x286 <vykresleniSloupce+0x44>
	_delay_us(1);
	PORTD = 0x00;
 28a:	12 ba       	out	0x12, r1	; 18
	// doba zobr.
	//PORTB = 0xFF;
	//PORTD = setBit(0x00,7);
	//_delay_us(1);
	//Vyèištìní dat
}
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	08 95       	ret

00000294 <vykresleniCisel>:
			cisloRegistr1=0;
			cisloRegistr2=0;
		}
}

void vykresleniCisel(void){ //Funkce pro zapisování dat a jejich vykreslovení na øádku
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	00 e0       	ldi	r16, 0x00	; 0
 2a2:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2a4:	e1 2c       	mov	r14, r1
 2a6:	34 e2       	ldi	r19, 0x24	; 36
 2a8:	f3 2e       	mov	r15, r19
 2aa:	46 c0       	rjmp	.+140    	; 0x338 <vykresleniCisel+0xa4>
	for(int y = 0; y<157;y++){
		for(int i = 0;i<8;i++){ //Pøíprava všech pøíslušných sloupcù a vykreslení sloupce
			zapsaniDat(cisloRegistr1,i,0); //Zapsání dat na i-tý sloupec první matice
 2ac:	80 91 a0 01 	lds	r24, 0x01A0
 2b0:	90 91 a1 01 	lds	r25, 0x01A1
 2b4:	be 01       	movw	r22, r28
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	0e 94 01 01 	call	0x202	; 0x202 <zapsaniDat>
			zapsaniDat(cisloRegistr2,i,1);
 2be:	80 91 a2 01 	lds	r24, 0x01A2
 2c2:	90 91 a3 01 	lds	r25, 0x01A3
 2c6:	be 01       	movw	r22, r28
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	0e 94 01 01 	call	0x202	; 0x202 <zapsaniDat>
			zapsaniDat(cisloRegistr3,i,2);
 2d0:	80 91 a4 01 	lds	r24, 0x01A4
 2d4:	90 91 a5 01 	lds	r25, 0x01A5
 2d8:	be 01       	movw	r22, r28
 2da:	42 e0       	ldi	r20, 0x02	; 2
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	0e 94 01 01 	call	0x202	; 0x202 <zapsaniDat>
			zapsaniDat(cisloRegistr4,i,3);
 2e2:	80 91 a8 01 	lds	r24, 0x01A8
 2e6:	90 91 a9 01 	lds	r25, 0x01A9
 2ea:	be 01       	movw	r22, r28
 2ec:	43 e0       	ldi	r20, 0x03	; 3
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	0e 94 01 01 	call	0x202	; 0x202 <zapsaniDat>
			zapsaniDat(cisloRegistr5,i,4);
 2f4:	80 91 a6 01 	lds	r24, 0x01A6
 2f8:	90 91 a7 01 	lds	r25, 0x01A7
 2fc:	be 01       	movw	r22, r28
 2fe:	44 e0       	ldi	r20, 0x04	; 4
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	0e 94 01 01 	call	0x202	; 0x202 <zapsaniDat>
			zapsaniDat(cisloRegistr6,i,5);
 306:	80 91 aa 01 	lds	r24, 0x01AA
 30a:	90 91 ab 01 	lds	r25, 0x01AB
 30e:	be 01       	movw	r22, r28
 310:	45 e0       	ldi	r20, 0x05	; 5
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	0e 94 01 01 	call	0x202	; 0x202 <zapsaniDat>
			vykresleniSloupce(i); //Vykreslení i-tého sloupce
 318:	ce 01       	movw	r24, r28
 31a:	0e 94 21 01 	call	0x242	; 0x242 <vykresleniSloupce>
 31e:	c7 01       	movw	r24, r14
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <vykresleniCisel+0x8c>
		}
}

void vykresleniCisel(void){ //Funkce pro zapisování dat a jejich vykreslovení na øádku
	for(int y = 0; y<157;y++){
		for(int i = 0;i<8;i++){ //Pøíprava všech pøíslušných sloupcù a vykreslení sloupce
 324:	21 96       	adiw	r28, 0x01	; 1
 326:	c8 30       	cpi	r28, 0x08	; 8
 328:	d1 05       	cpc	r29, r1
 32a:	09 f0       	breq	.+2      	; 0x32e <vykresleniCisel+0x9a>
 32c:	bf cf       	rjmp	.-130    	; 0x2ac <vykresleniCisel+0x18>
			cisloRegistr2=0;
		}
}

void vykresleniCisel(void){ //Funkce pro zapisování dat a jejich vykreslovení na øádku
	for(int y = 0; y<157;y++){
 32e:	0f 5f       	subi	r16, 0xFF	; 255
 330:	1f 4f       	sbci	r17, 0xFF	; 255
 332:	0d 39       	cpi	r16, 0x9D	; 157
 334:	11 05       	cpc	r17, r1
 336:	19 f0       	breq	.+6      	; 0x33e <vykresleniCisel+0xaa>
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	d0 e0       	ldi	r29, 0x00	; 0
 33c:	b7 cf       	rjmp	.-146    	; 0x2ac <vykresleniCisel+0x18>
			zapsaniDat(cisloRegistr6,i,5);
			vykresleniSloupce(i); //Vykreslení i-tého sloupce
			_delay_ms(2.5);
		}
	}
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	08 95       	ret

0000034c <main>:

int main(void){
	setup();
 34c:	0e 94 73 00 	call	0xe6	; 0xe6 <setup>
	
	while(1){
		vykresleniCisel();
 350:	0e 94 4a 01 	call	0x294	; 0x294 <vykresleniCisel>
		pocitaniCasu();
 354:	0e 94 82 00 	call	0x104	; 0x104 <pocitaniCasu>
 358:	fb cf       	rjmp	.-10     	; 0x350 <main+0x4>

0000035a <setBit>:
#include "bitFunkce.h"

//NastavÃ­ danÃ½ bit do log. 1
int setBit(int value, int bitno) {
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <setBit+0xa>
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <setBit+0x6>
 368:	28 2b       	or	r18, r24
 36a:	39 2b       	or	r19, r25
    value |= (1 << bitno);
    return value;
}
 36c:	c9 01       	movw	r24, r18
 36e:	08 95       	ret

00000370 <clearBit>:

//Vynuluje danÃ½ bit
int clearBit(int value, int bitno) {
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <clearBit+0xa>
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <clearBit+0x6>
 37e:	20 95       	com	r18
 380:	30 95       	com	r19
 382:	28 23       	and	r18, r24
 384:	39 23       	and	r19, r25
    value &= ~(1 << bitno);
    return value;
}
 386:	c9 01       	movw	r24, r18
 388:	08 95       	ret

0000038a <toggleBit>:

//ZmÄ›na stavu danÃ©ho bitu
int toggleBit(int value, int bitno) {
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <toggleBit+0xa>
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <toggleBit+0x6>
 398:	28 27       	eor	r18, r24
 39a:	39 27       	eor	r19, r25
    value ^= (1 << bitno);
    return value;
}
 39c:	c9 01       	movw	r24, r18
 39e:	08 95       	ret

000003a0 <bitIsSet>:

//VrÃ¡tÃ­ true pokud je danÃ½ bit v log. 1
int bitIsSet(int value, int bitno) {
 3a0:	9c 01       	movw	r18, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <bitIsSet+0x8>
 3a4:	35 95       	asr	r19
 3a6:	27 95       	ror	r18
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <bitIsSet+0x4>
 3ac:	21 70       	andi	r18, 0x01	; 1
 3ae:	30 70       	andi	r19, 0x00	; 0
    return (value >> bitno) & 1;
}
 3b0:	c9 01       	movw	r24, r18
 3b2:	08 95       	ret

000003b4 <bitIsClear>:

//VrÃ¡tÃ­ true pokud je danÃ½ bit v log. 0 
int bitIsClear(int value, int bitno) {
 3b4:	9c 01       	movw	r18, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <bitIsClear+0x8>
 3b8:	35 95       	asr	r19
 3ba:	27 95       	ror	r18
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <bitIsClear+0x4>
 3c0:	20 95       	com	r18
 3c2:	30 95       	com	r19
 3c4:	21 70       	andi	r18, 0x01	; 1
 3c6:	30 70       	andi	r19, 0x00	; 0
    return !bitIsSet(value, bitno);
 3c8:	c9 01       	movw	r24, r18
 3ca:	08 95       	ret

000003cc <vfprintf>:
 3cc:	6f 92       	push	r6
 3ce:	7f 92       	push	r7
 3d0:	8f 92       	push	r8
 3d2:	9f 92       	push	r9
 3d4:	af 92       	push	r10
 3d6:	bf 92       	push	r11
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	2b 97       	sbiw	r28, 0x0b	; 11
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	5c 01       	movw	r10, r24
 3fa:	4b 01       	movw	r8, r22
 3fc:	7a 01       	movw	r14, r20
 3fe:	fc 01       	movw	r30, r24
 400:	17 82       	std	Z+7, r1	; 0x07
 402:	16 82       	std	Z+6, r1	; 0x06
 404:	83 81       	ldd	r24, Z+3	; 0x03
 406:	81 fd       	sbrc	r24, 1
 408:	08 c0       	rjmp	.+16     	; 0x41a <vfprintf+0x4e>
 40a:	6f ef       	ldi	r22, 0xFF	; 255
 40c:	7f ef       	ldi	r23, 0xFF	; 255
 40e:	08 c1       	rjmp	.+528    	; 0x620 <vfprintf+0x254>
 410:	42 e0       	ldi	r20, 0x02	; 2
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	e4 0e       	add	r14, r20
 416:	f5 1e       	adc	r15, r21
 418:	04 c0       	rjmp	.+8      	; 0x422 <vfprintf+0x56>
 41a:	3e 01       	movw	r6, r28
 41c:	08 94       	sec
 41e:	61 1c       	adc	r6, r1
 420:	71 1c       	adc	r7, r1
 422:	f5 01       	movw	r30, r10
 424:	d3 80       	ldd	r13, Z+3	; 0x03
 426:	f4 01       	movw	r30, r8
 428:	d3 fc       	sbrc	r13, 3
 42a:	85 91       	lpm	r24, Z+
 42c:	d3 fe       	sbrs	r13, 3
 42e:	81 91       	ld	r24, Z+
 430:	4f 01       	movw	r8, r30
 432:	88 23       	and	r24, r24
 434:	09 f4       	brne	.+2      	; 0x438 <vfprintf+0x6c>
 436:	f1 c0       	rjmp	.+482    	; 0x61a <vfprintf+0x24e>
 438:	85 32       	cpi	r24, 0x25	; 37
 43a:	59 f4       	brne	.+22     	; 0x452 <vfprintf+0x86>
 43c:	d3 fc       	sbrc	r13, 3
 43e:	65 91       	lpm	r22, Z+
 440:	d3 fe       	sbrs	r13, 3
 442:	61 91       	ld	r22, Z+
 444:	4f 01       	movw	r8, r30
 446:	65 32       	cpi	r22, 0x25	; 37
 448:	19 f0       	breq	.+6      	; 0x450 <vfprintf+0x84>
 44a:	06 2f       	mov	r16, r22
 44c:	10 e0       	ldi	r17, 0x00	; 0
 44e:	1b c0       	rjmp	.+54     	; 0x486 <vfprintf+0xba>
 450:	85 e2       	ldi	r24, 0x25	; 37
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	2b c0       	rjmp	.+86     	; 0x4ac <vfprintf+0xe0>
 456:	00 23       	and	r16, r16
 458:	09 f4       	brne	.+2      	; 0x45c <vfprintf+0x90>
 45a:	df c0       	rjmp	.+446    	; 0x61a <vfprintf+0x24e>
 45c:	83 e9       	ldi	r24, 0x93	; 147
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	60 2f       	mov	r22, r16
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 26 03 	call	0x64c	; 0x64c <strchr_P>
 468:	89 2b       	or	r24, r25
 46a:	39 f4       	brne	.+14     	; 0x47a <vfprintf+0xae>
 46c:	03 32       	cpi	r16, 0x23	; 35
 46e:	11 f4       	brne	.+4      	; 0x474 <vfprintf+0xa8>
 470:	10 61       	ori	r17, 0x10	; 16
 472:	03 c0       	rjmp	.+6      	; 0x47a <vfprintf+0xae>
 474:	0c 36       	cpi	r16, 0x6C	; 108
 476:	61 f4       	brne	.+24     	; 0x490 <vfprintf+0xc4>
 478:	10 68       	ori	r17, 0x80	; 128
 47a:	f4 01       	movw	r30, r8
 47c:	d3 fc       	sbrc	r13, 3
 47e:	05 91       	lpm	r16, Z+
 480:	d3 fe       	sbrs	r13, 3
 482:	01 91       	ld	r16, Z+
 484:	4f 01       	movw	r8, r30
 486:	17 ff       	sbrs	r17, 7
 488:	e6 cf       	rjmp	.-52     	; 0x456 <vfprintf+0x8a>
 48a:	00 23       	and	r16, r16
 48c:	09 f4       	brne	.+2      	; 0x490 <vfprintf+0xc4>
 48e:	c5 c0       	rjmp	.+394    	; 0x61a <vfprintf+0x24e>
 490:	8c e8       	ldi	r24, 0x8C	; 140
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	60 2f       	mov	r22, r16
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	0e 94 26 03 	call	0x64c	; 0x64c <strchr_P>
 49c:	89 2b       	or	r24, r25
 49e:	51 f0       	breq	.+20     	; 0x4b4 <vfprintf+0xe8>
 4a0:	44 e0       	ldi	r20, 0x04	; 4
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	e4 0e       	add	r14, r20
 4a6:	f5 1e       	adc	r15, r21
 4a8:	8f e3       	ldi	r24, 0x3F	; 63
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	b5 01       	movw	r22, r10
 4ae:	0e 94 31 03 	call	0x662	; 0x662 <fputc>
 4b2:	b7 cf       	rjmp	.-146    	; 0x422 <vfprintf+0x56>
 4b4:	03 36       	cpi	r16, 0x63	; 99
 4b6:	29 f0       	breq	.+10     	; 0x4c2 <vfprintf+0xf6>
 4b8:	03 37       	cpi	r16, 0x73	; 115
 4ba:	79 f0       	breq	.+30     	; 0x4da <vfprintf+0x10e>
 4bc:	03 35       	cpi	r16, 0x53	; 83
 4be:	f1 f4       	brne	.+60     	; 0x4fc <vfprintf+0x130>
 4c0:	0b c0       	rjmp	.+22     	; 0x4d8 <vfprintf+0x10c>
 4c2:	87 01       	movw	r16, r14
 4c4:	0e 5f       	subi	r16, 0xFE	; 254
 4c6:	1f 4f       	sbci	r17, 0xFF	; 255
 4c8:	f7 01       	movw	r30, r14
 4ca:	80 81       	ld	r24, Z
 4cc:	91 81       	ldd	r25, Z+1	; 0x01
 4ce:	b5 01       	movw	r22, r10
 4d0:	0e 94 31 03 	call	0x662	; 0x662 <fputc>
 4d4:	78 01       	movw	r14, r16
 4d6:	a5 cf       	rjmp	.-182    	; 0x422 <vfprintf+0x56>
 4d8:	11 60       	ori	r17, 0x01	; 1
 4da:	f7 01       	movw	r30, r14
 4dc:	c0 80       	ld	r12, Z
 4de:	d1 80       	ldd	r13, Z+1	; 0x01
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <vfprintf+0x11e>
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	b5 01       	movw	r22, r10
 4e6:	0e 94 31 03 	call	0x662	; 0x662 <fputc>
 4ea:	f6 01       	movw	r30, r12
 4ec:	10 fd       	sbrc	r17, 0
 4ee:	85 91       	lpm	r24, Z+
 4f0:	10 ff       	sbrs	r17, 0
 4f2:	81 91       	ld	r24, Z+
 4f4:	6f 01       	movw	r12, r30
 4f6:	88 23       	and	r24, r24
 4f8:	a1 f7       	brne	.-24     	; 0x4e2 <vfprintf+0x116>
 4fa:	8a cf       	rjmp	.-236    	; 0x410 <vfprintf+0x44>
 4fc:	04 36       	cpi	r16, 0x64	; 100
 4fe:	11 f0       	breq	.+4      	; 0x504 <vfprintf+0x138>
 500:	09 36       	cpi	r16, 0x69	; 105
 502:	39 f5       	brne	.+78     	; 0x552 <vfprintf+0x186>
 504:	17 ff       	sbrs	r17, 7
 506:	08 c0       	rjmp	.+16     	; 0x518 <vfprintf+0x14c>
 508:	f7 01       	movw	r30, r14
 50a:	20 81       	ld	r18, Z
 50c:	31 81       	ldd	r19, Z+1	; 0x01
 50e:	42 81       	ldd	r20, Z+2	; 0x02
 510:	53 81       	ldd	r21, Z+3	; 0x03
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0a c0       	rjmp	.+20     	; 0x52c <vfprintf+0x160>
 518:	f7 01       	movw	r30, r14
 51a:	80 81       	ld	r24, Z
 51c:	91 81       	ldd	r25, Z+1	; 0x01
 51e:	9c 01       	movw	r18, r24
 520:	44 27       	eor	r20, r20
 522:	37 fd       	sbrc	r19, 7
 524:	40 95       	com	r20
 526:	54 2f       	mov	r21, r20
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	e8 0e       	add	r14, r24
 52e:	f9 1e       	adc	r15, r25
 530:	1f 7e       	andi	r17, 0xEF	; 239
 532:	57 ff       	sbrs	r21, 7
 534:	08 c0       	rjmp	.+16     	; 0x546 <vfprintf+0x17a>
 536:	50 95       	com	r21
 538:	40 95       	com	r20
 53a:	30 95       	com	r19
 53c:	21 95       	neg	r18
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	4f 4f       	sbci	r20, 0xFF	; 255
 542:	5f 4f       	sbci	r21, 0xFF	; 255
 544:	10 64       	ori	r17, 0x40	; 64
 546:	ca 01       	movw	r24, r20
 548:	b9 01       	movw	r22, r18
 54a:	a3 01       	movw	r20, r6
 54c:	2a e0       	ldi	r18, 0x0A	; 10
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	34 c0       	rjmp	.+104    	; 0x5ba <vfprintf+0x1ee>
 552:	00 37       	cpi	r16, 0x70	; 112
 554:	a9 f0       	breq	.+42     	; 0x580 <vfprintf+0x1b4>
 556:	01 37       	cpi	r16, 0x71	; 113
 558:	30 f4       	brcc	.+12     	; 0x566 <vfprintf+0x19a>
 55a:	08 35       	cpi	r16, 0x58	; 88
 55c:	b1 f0       	breq	.+44     	; 0x58a <vfprintf+0x1be>
 55e:	0f 36       	cpi	r16, 0x6F	; 111
 560:	09 f0       	breq	.+2      	; 0x564 <vfprintf+0x198>
 562:	5b c0       	rjmp	.+182    	; 0x61a <vfprintf+0x24e>
 564:	06 c0       	rjmp	.+12     	; 0x572 <vfprintf+0x1a6>
 566:	05 37       	cpi	r16, 0x75	; 117
 568:	39 f0       	breq	.+14     	; 0x578 <vfprintf+0x1ac>
 56a:	08 37       	cpi	r16, 0x78	; 120
 56c:	09 f0       	breq	.+2      	; 0x570 <vfprintf+0x1a4>
 56e:	55 c0       	rjmp	.+170    	; 0x61a <vfprintf+0x24e>
 570:	08 c0       	rjmp	.+16     	; 0x582 <vfprintf+0x1b6>
 572:	28 e0       	ldi	r18, 0x08	; 8
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	0c c0       	rjmp	.+24     	; 0x590 <vfprintf+0x1c4>
 578:	1f 7e       	andi	r17, 0xEF	; 239
 57a:	2a e0       	ldi	r18, 0x0A	; 10
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	08 c0       	rjmp	.+16     	; 0x590 <vfprintf+0x1c4>
 580:	10 61       	ori	r17, 0x10	; 16
 582:	14 62       	ori	r17, 0x24	; 36
 584:	20 e1       	ldi	r18, 0x10	; 16
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	03 c0       	rjmp	.+6      	; 0x590 <vfprintf+0x1c4>
 58a:	14 60       	ori	r17, 0x04	; 4
 58c:	20 e1       	ldi	r18, 0x10	; 16
 58e:	32 e0       	ldi	r19, 0x02	; 2
 590:	17 ff       	sbrs	r17, 7
 592:	08 c0       	rjmp	.+16     	; 0x5a4 <vfprintf+0x1d8>
 594:	f7 01       	movw	r30, r14
 596:	60 81       	ld	r22, Z
 598:	71 81       	ldd	r23, Z+1	; 0x01
 59a:	82 81       	ldd	r24, Z+2	; 0x02
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	44 e0       	ldi	r20, 0x04	; 4
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <vfprintf+0x1e8>
 5a4:	f7 01       	movw	r30, r14
 5a6:	80 81       	ld	r24, Z
 5a8:	91 81       	ldd	r25, Z+1	; 0x01
 5aa:	bc 01       	movw	r22, r24
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	42 e0       	ldi	r20, 0x02	; 2
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	e4 0e       	add	r14, r20
 5b6:	f5 1e       	adc	r15, r21
 5b8:	a3 01       	movw	r20, r6
 5ba:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__ultoa_invert>
 5be:	d8 2e       	mov	r13, r24
 5c0:	d6 18       	sub	r13, r6
 5c2:	01 2f       	mov	r16, r17
 5c4:	10 e0       	ldi	r17, 0x00	; 0
 5c6:	06 ff       	sbrs	r16, 6
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <vfprintf+0x208>
 5ca:	8d e2       	ldi	r24, 0x2D	; 45
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	b5 01       	movw	r22, r10
 5d0:	0e 94 31 03 	call	0x662	; 0x662 <fputc>
 5d4:	04 ff       	sbrs	r16, 4
 5d6:	15 c0       	rjmp	.+42     	; 0x602 <vfprintf+0x236>
 5d8:	fe 01       	movw	r30, r28
 5da:	ed 0d       	add	r30, r13
 5dc:	f1 1d       	adc	r31, r1
 5de:	80 81       	ld	r24, Z
 5e0:	80 33       	cpi	r24, 0x30	; 48
 5e2:	79 f0       	breq	.+30     	; 0x602 <vfprintf+0x236>
 5e4:	80 e3       	ldi	r24, 0x30	; 48
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	b5 01       	movw	r22, r10
 5ea:	0e 94 31 03 	call	0x662	; 0x662 <fputc>
 5ee:	02 ff       	sbrs	r16, 2
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <vfprintf+0x236>
 5f2:	00 72       	andi	r16, 0x20	; 32
 5f4:	10 70       	andi	r17, 0x00	; 0
 5f6:	c8 01       	movw	r24, r16
 5f8:	88 5a       	subi	r24, 0xA8	; 168
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	b5 01       	movw	r22, r10
 5fe:	0e 94 31 03 	call	0x662	; 0x662 <fputc>
 602:	da 94       	dec	r13
 604:	f3 01       	movw	r30, r6
 606:	ed 0d       	add	r30, r13
 608:	f1 1d       	adc	r31, r1
 60a:	80 81       	ld	r24, Z
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	b5 01       	movw	r22, r10
 610:	0e 94 31 03 	call	0x662	; 0x662 <fputc>
 614:	dd 20       	and	r13, r13
 616:	a9 f7       	brne	.-22     	; 0x602 <vfprintf+0x236>
 618:	04 cf       	rjmp	.-504    	; 0x422 <vfprintf+0x56>
 61a:	f5 01       	movw	r30, r10
 61c:	66 81       	ldd	r22, Z+6	; 0x06
 61e:	77 81       	ldd	r23, Z+7	; 0x07
 620:	cb 01       	movw	r24, r22
 622:	2b 96       	adiw	r28, 0x0b	; 11
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	cf 91       	pop	r28
 630:	df 91       	pop	r29
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	df 90       	pop	r13
 63c:	cf 90       	pop	r12
 63e:	bf 90       	pop	r11
 640:	af 90       	pop	r10
 642:	9f 90       	pop	r9
 644:	8f 90       	pop	r8
 646:	7f 90       	pop	r7
 648:	6f 90       	pop	r6
 64a:	08 95       	ret

0000064c <strchr_P>:
 64c:	fc 01       	movw	r30, r24
 64e:	05 90       	lpm	r0, Z+
 650:	06 16       	cp	r0, r22
 652:	21 f0       	breq	.+8      	; 0x65c <strchr_P+0x10>
 654:	00 20       	and	r0, r0
 656:	d9 f7       	brne	.-10     	; 0x64e <strchr_P+0x2>
 658:	c0 01       	movw	r24, r0
 65a:	08 95       	ret
 65c:	31 97       	sbiw	r30, 0x01	; 1
 65e:	cf 01       	movw	r24, r30
 660:	08 95       	ret

00000662 <fputc>:
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	8c 01       	movw	r16, r24
 66c:	eb 01       	movw	r28, r22
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	81 ff       	sbrs	r24, 1
 672:	1b c0       	rjmp	.+54     	; 0x6aa <fputc+0x48>
 674:	82 ff       	sbrs	r24, 2
 676:	0d c0       	rjmp	.+26     	; 0x692 <fputc+0x30>
 678:	2e 81       	ldd	r18, Y+6	; 0x06
 67a:	3f 81       	ldd	r19, Y+7	; 0x07
 67c:	8c 81       	ldd	r24, Y+4	; 0x04
 67e:	9d 81       	ldd	r25, Y+5	; 0x05
 680:	28 17       	cp	r18, r24
 682:	39 07       	cpc	r19, r25
 684:	64 f4       	brge	.+24     	; 0x69e <fputc+0x3c>
 686:	e8 81       	ld	r30, Y
 688:	f9 81       	ldd	r31, Y+1	; 0x01
 68a:	01 93       	st	Z+, r16
 68c:	f9 83       	std	Y+1, r31	; 0x01
 68e:	e8 83       	st	Y, r30
 690:	06 c0       	rjmp	.+12     	; 0x69e <fputc+0x3c>
 692:	e8 85       	ldd	r30, Y+8	; 0x08
 694:	f9 85       	ldd	r31, Y+9	; 0x09
 696:	80 2f       	mov	r24, r16
 698:	09 95       	icall
 69a:	89 2b       	or	r24, r25
 69c:	31 f4       	brne	.+12     	; 0x6aa <fputc+0x48>
 69e:	8e 81       	ldd	r24, Y+6	; 0x06
 6a0:	9f 81       	ldd	r25, Y+7	; 0x07
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	9f 83       	std	Y+7, r25	; 0x07
 6a6:	8e 83       	std	Y+6, r24	; 0x06
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <fputc+0x4c>
 6aa:	0f ef       	ldi	r16, 0xFF	; 255
 6ac:	1f ef       	ldi	r17, 0xFF	; 255
 6ae:	c8 01       	movw	r24, r16
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	08 95       	ret

000006ba <__ultoa_invert>:
 6ba:	fa 01       	movw	r30, r20
 6bc:	aa 27       	eor	r26, r26
 6be:	28 30       	cpi	r18, 0x08	; 8
 6c0:	51 f1       	breq	.+84     	; 0x716 <__ultoa_invert+0x5c>
 6c2:	20 31       	cpi	r18, 0x10	; 16
 6c4:	81 f1       	breq	.+96     	; 0x726 <__ultoa_invert+0x6c>
 6c6:	e8 94       	clt
 6c8:	6f 93       	push	r22
 6ca:	6e 7f       	andi	r22, 0xFE	; 254
 6cc:	6e 5f       	subi	r22, 0xFE	; 254
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	af 4f       	sbci	r26, 0xFF	; 255
 6d6:	b1 e0       	ldi	r27, 0x01	; 1
 6d8:	3e d0       	rcall	.+124    	; 0x756 <__ultoa_invert+0x9c>
 6da:	b4 e0       	ldi	r27, 0x04	; 4
 6dc:	3c d0       	rcall	.+120    	; 0x756 <__ultoa_invert+0x9c>
 6de:	67 0f       	add	r22, r23
 6e0:	78 1f       	adc	r23, r24
 6e2:	89 1f       	adc	r24, r25
 6e4:	9a 1f       	adc	r25, r26
 6e6:	a1 1d       	adc	r26, r1
 6e8:	68 0f       	add	r22, r24
 6ea:	79 1f       	adc	r23, r25
 6ec:	8a 1f       	adc	r24, r26
 6ee:	91 1d       	adc	r25, r1
 6f0:	a1 1d       	adc	r26, r1
 6f2:	6a 0f       	add	r22, r26
 6f4:	71 1d       	adc	r23, r1
 6f6:	81 1d       	adc	r24, r1
 6f8:	91 1d       	adc	r25, r1
 6fa:	a1 1d       	adc	r26, r1
 6fc:	20 d0       	rcall	.+64     	; 0x73e <__ultoa_invert+0x84>
 6fe:	09 f4       	brne	.+2      	; 0x702 <__ultoa_invert+0x48>
 700:	68 94       	set
 702:	3f 91       	pop	r19
 704:	2a e0       	ldi	r18, 0x0A	; 10
 706:	26 9f       	mul	r18, r22
 708:	11 24       	eor	r1, r1
 70a:	30 19       	sub	r19, r0
 70c:	30 5d       	subi	r19, 0xD0	; 208
 70e:	31 93       	st	Z+, r19
 710:	de f6       	brtc	.-74     	; 0x6c8 <__ultoa_invert+0xe>
 712:	cf 01       	movw	r24, r30
 714:	08 95       	ret
 716:	46 2f       	mov	r20, r22
 718:	47 70       	andi	r20, 0x07	; 7
 71a:	40 5d       	subi	r20, 0xD0	; 208
 71c:	41 93       	st	Z+, r20
 71e:	b3 e0       	ldi	r27, 0x03	; 3
 720:	0f d0       	rcall	.+30     	; 0x740 <__ultoa_invert+0x86>
 722:	c9 f7       	brne	.-14     	; 0x716 <__ultoa_invert+0x5c>
 724:	f6 cf       	rjmp	.-20     	; 0x712 <__ultoa_invert+0x58>
 726:	46 2f       	mov	r20, r22
 728:	4f 70       	andi	r20, 0x0F	; 15
 72a:	40 5d       	subi	r20, 0xD0	; 208
 72c:	4a 33       	cpi	r20, 0x3A	; 58
 72e:	18 f0       	brcs	.+6      	; 0x736 <__ultoa_invert+0x7c>
 730:	49 5d       	subi	r20, 0xD9	; 217
 732:	31 fd       	sbrc	r19, 1
 734:	40 52       	subi	r20, 0x20	; 32
 736:	41 93       	st	Z+, r20
 738:	02 d0       	rcall	.+4      	; 0x73e <__ultoa_invert+0x84>
 73a:	a9 f7       	brne	.-22     	; 0x726 <__ultoa_invert+0x6c>
 73c:	ea cf       	rjmp	.-44     	; 0x712 <__ultoa_invert+0x58>
 73e:	b4 e0       	ldi	r27, 0x04	; 4
 740:	a6 95       	lsr	r26
 742:	97 95       	ror	r25
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	ba 95       	dec	r27
 74c:	c9 f7       	brne	.-14     	; 0x740 <__ultoa_invert+0x86>
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	61 05       	cpc	r22, r1
 752:	71 05       	cpc	r23, r1
 754:	08 95       	ret
 756:	9b 01       	movw	r18, r22
 758:	ac 01       	movw	r20, r24
 75a:	0a 2e       	mov	r0, r26
 75c:	06 94       	lsr	r0
 75e:	57 95       	ror	r21
 760:	47 95       	ror	r20
 762:	37 95       	ror	r19
 764:	27 95       	ror	r18
 766:	ba 95       	dec	r27
 768:	c9 f7       	brne	.-14     	; 0x75c <__ultoa_invert+0xa2>
 76a:	62 0f       	add	r22, r18
 76c:	73 1f       	adc	r23, r19
 76e:	84 1f       	adc	r24, r20
 770:	95 1f       	adc	r25, r21
 772:	a0 1d       	adc	r26, r0
 774:	08 95       	ret

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
